---
# Called from Windows-Rollback.yml
# Temp file with everything that security_policy.yml normally takes care of

# Imported vars: RegDefaultsPath RegistryDefaults

# - name: Try setting up a dictionary

- name: SetUserDict
  set_fact:
    DefaultUsers: { }
    # DefaultUsers: { V: [Administrators,Users,Backup Operators] }

# AC-3 Tasks
# - name: UN_AC_3 U > Set no one to act as part of the operating system
#   win_user_right:
#     name: SeTcbPrivilege
#     users:
#     action: set
#   register: UserDelta
#   when: skip_UN_AC_3_U is not defined

# - debug:
#     var: UserDelta

- name: UN_AC_3 V > Set no one to act as part of the operating system
  win_user_right:
    name: SeInteractiveLogonRight
    users: "{{['Administrators'] if (undo_UN_AC_3_V is not defined or DefaultUsers.V is not defined) else DefaultUsers.V}}"
    action: set
  register: UserDelta
  when: skip_UN_AC_3_V is not defined

- debug:
    var: UserDelta

- name: UN_AC_3 Vd > Set previous task defaults
  set_fact:
    # UsersToAdd: "{{ ['Administrators'] | union(UserDelta.removed) | difference(UserDelta.added) }}"
    DefaultUsers: "{{ DefaultUsers | combine( {'V': ['Administrators'] | union(UserDelta.removed) | difference(UserDelta.added) } ) }}"

# "{{ (['Administrators'] | combine(UserDelta.removed)) | difference(UserDelta.added) }}"
# UN_SC_5_Def: "{{ UN_SC_5_Def | combine( {item.item.taskID: (item.value if item.exists else 4294967295)} ) }}"

- debug:
    var: DefaultUsers

# # SC-5 Tasks
# - name: UN_SC_5 F > Set no one to act as part of the operating system
#   win_user_right:
#     name: SeIncreaseQuotaPrivilege
#     users:
#       - Administrators
#       - LOCAL SERVICE
#       - NETWORK SERVICE
#     action: set
#   register: UserDelta
#   when: skip_UN_SC_5_F is not defined

# - debug:
#     var: UserDelta

# AU-9 Tasks

