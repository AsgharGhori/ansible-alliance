# == Task Script ==
# Contains tasks for retrieving status defaults for files,
# appending them to MachineDefaults, and writing to defaults file
# Called from a List script

# Expected vars/facts:
# - MachineDefaults {} (empty or populated)
# - SecCat
# - TaskCat
# - StatTasks [{}] (one object)
#   - ID
#   - Path
#   - Desc (unused)
#   - Mode (unused)
#   - Content (checked)
---
- name: Initialize facts
  set_fact:
    Sec_Task: "{{ SecCat }}_{{ TaskCat }}"
    FileDict: {}

- name: "Initialize {{Sec_Task}} regedit defaults"
  set_fact:
    MachineDefaults: "{{ MachineDefaults |combine({ Sec_Task:{} }) }}"
  when: not Sec_Task in MachineDefaults

- name: "Retrieve {{ Sec_Task }} file status defaults"
  stat:
    path: "{{ item.Path }}"
    get_attributes: false
    get_checksum: false
    get_md5: false
    get_mime: false
  register: FileStats
  loop: "{{ StatTasks }}"

# May require a more complex jinja2 statement at its core in the future
- name: Add {{ Sec_Task }} file status defaults to temp dictionary
  set_fact:
    FileDict: "{{ FileDict |combine({ item.item.ID:
    ( item.stat.exists if item.item.Content is defined else item.stat.mode ) }) }}"
  loop: "{{ FileStats.results }}"

- debug:
    var: FileDict

- name: Append {{ Sec_Task }} file status defaults to MachineDefaults dictionary
  set_fact:
    MachineDefaults: "{{ MachineDefaults |combine({ Sec_Task:
      MachineDefaults[Sec_Task] |combine( FileDict ) }) }}"

- debug:
    var: MachineDefaults

- name: "Write {{ Sec_Task }} file status defaults to MachineDefaults file"
  copy:
    dest: "{{ MachineDefaultsPath }}"
    content: "{{ MachineDefaults }}"