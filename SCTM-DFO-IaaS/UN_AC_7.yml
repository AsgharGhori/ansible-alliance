---
# Called from Windows-Rollback.yml
# Includes all the tasks that fall under
# the Unclassed UN_AC_7 protocol requirements

# Imported vars: RegDefaultsPath RegistryDefaults

- name: UN_AC_7 ? > Check for UN_AC_7 defaults entry
  set_fact:
    HasUNAC7Def: "{{ 'UN_AC_7' in RegistryDefaults }}"

- name: UN_AC_7 = > Get keys if UN_AC_7 is not an entry
  win_command: "net accounts"
  register: UN_AC7_NetAccounts
  when: not HasUNAC7Def

- name: UN_AC_7 %+ > Parse ouput and add keys to dictionary
  set_fact:
    UN_AC_7_Def: "{{ UN_AC_7_Def|default({}) | combine( {item.name: (UN_AC7_NetAccounts.stdout_lines[item.index].strip(item.strip).strip() | int)} ) }}"
  loop:
    - { name: lockoutthreshold, index: 5, strip: "Lockout threshold:" }
    - { name: lockoutduration, index: 6, strip: "Lockout duration (minutes):" }
    - { name: lockoutwindow, index: 7, strip: "Lockout observation window (minutes):" }
  when: not HasUNAC7Def

- name: UN_AC_7 ++ > Add dictionary to RegistryDefaults dictionary
  set_fact:
    RegistryDefaults: "{{ RegistryDefaults | combine({'UN_AC_7':UN_AC_7_Def}) }}"
  when: not HasUNAC7Def

- name: UN_AC_7 IO > Write dictionary
  win_copy:
    dest: "{{ RegDefaultsPath }}"
    content: "{{ RegistryDefaults }}"
  when: not HasUNAC7Def

# Tasks
- name: AC-7 A > Set password attempts before lockout to 5
  win_command: "{{ 'net accounts /lockoutthreshold:'+(5 if undo_UN_AC_7 is not defined else RegistryDefaults.UN_AC_7.A) }}"
  when: skip_UN_AC_7_A is not defined

- name: AC-7 B > Set lockout duration to 60 minutes
  win_command: "{{ 'net accounts /lockoutduration:'+(60 if undo_UN_AC_7 is not defined else RegistryDefaults.UN_AC_4.B) }}"
  when: skip_UN_AC_7_B is not defined

- name: AC-7 C > Set time before password attempts resets to 60 minutes
  win_command: "{{ 'net accounts /lockoutwindow:'+(60 if undo_UN_AC_7 is not defined else RegistryDefaults.UN_AC_4.C) }}"
  when: skip_UN_AC_7_C is not defined