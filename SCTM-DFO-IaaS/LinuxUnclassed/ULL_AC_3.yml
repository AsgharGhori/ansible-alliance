# == List Script ==
# Includes all the tasks that fall under
# the Unclassed-Low-Low AC-3 protocol requirements

# Expected vars/facts:
# - MachineDefaults {} (populated)
---
# Init task dictionaries
- name: Set AC-3 file task dictionaries
  set_fact:
    ULL_AC_3_ChmodTasks:
    - { Desc: Set 'update-motd.d' permissions to 755,
      ID: A, Path: /etc/update-motd.d, Directory: ,
      Mode: '755', Owner: root, Group: root }
    - { Desc: Set 'update-motd.d' content permissions to 644,
      ID: B, Path: /etc/update-motd.d,  Recurse: ,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set 'hosts.allow' permissions to 644,
      ID: C, Path: /etc/hosts.allow,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set 'hosts.deny' permissions to 644,
      ID: D, Path: /etc/hosts.deny,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set 'crontab' permissions to 600,
      ID: E, Path: /etc/crontab,
      Mode: '600', Owner: root, Group: root }

    - { Desc: Set 'cron.hourly' content permissions to 600,
      ID: F, Path: /etc/cron.hourly, Recurse: ,
      Mode: '600', Owner: root, Group: root }
    - { Desc: Set 'cron.daily' content permissions to 600,
      ID: G, Path: /etc/cron.daily,  Recurse: ,
      Mode: '600', Owner: root, Group: root }
    - { Desc: Set 'cron.weekly' content permissions to 600,
      ID: H, Path: /etc/cron.weekly, Recurse: ,
      Mode: '600', Owner: root, Group: root }
    - { Desc: Set 'cron.monthly' content permissions to 600,
      ID: I, Path: /etc/cron.monthly, Recurse: ,
      Mode: '600', Owner: root, Group: root }
    - { Desc: Set 'cron.d' content permissions to 600,
      ID: J, Path: /etc/cron.d, Recurse: ,
      Mode: '600', Owner: root, Group: root }

    - { Desc: Set 'sshd_config' permissions to 600,
      ID: K, Path: /etc/ssh/sshd_config,
      Mode: '600', Owner: root, Group: root }
    - { Desc: Set password access rules to 644,
      ID: L, Path: /etc/passwd,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set user account info access rules to 640,
      ID: M, Path: /etc/shadow,
      Mode: '640', Owner: root, Group: shadow }
    - { Desc: Set group list access rules to 644,
      ID: 'N', Path: /etc/group,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set group account info access rules to 640,
      ID: O, Path: /etc/gshadow,
      Mode: '640', Owner: root, Group: shadow }

    - { Desc: Set password backup access rules to 644,
      ID: P, Path: /etc/passwd-,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set account info backup access rules to 640,
      ID: Q, Path: /etc/shadow-,
      Mode: '640', Owner: root, Group: shadow }
    - { Desc: Set group list backup access rules to 644,
      ID: R, Path: /etc/group-,
      Mode: '644', Owner: root, Group: root }
    - { Desc: Set group account info backup access rules to 644,
      ID: S, Path: /etc/gshadow-,
      Mode: '644', Owner: root, Group: root }

    ULL_AC_3_EditTextTasks:
    - { Desc: Restrict use of 'su' to wheel group users,
      ID: AA, ToAdd: 'auth required pam_wheel.so' }
    - { Desc: Prevent X11 traffic tunnelling,
      ID: BB, ToEnsure: 'X11Forwarding no' }
    - { Desc: Set SSH user access parameters,
      ID: CC, ToEnsure: 'AllowUsers\nAllowGroups\nDenyUsers\nDenyGroups' }

    ULL_AC_3_SetFileUMask:
    # umask027  /etc/bash.bachrc  /etc/profile  /etc/profile.d/*sh

    ULL_AC_3_Command:
    # Make sure files are not world-writeable
    # df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002
    # Make sure files don't have unlisted owners or groups
    # df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup
    # Find and audit rogue SUID programs
    # df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -4000
    # Find and audit rogue SGID programs
    # df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -2000
    # Ensure users' accounts are password-protected
    # cat /etc/shadow | awk -F: '($2 == "" ) { print $1 " does not have a password "}'
    # Ensure users' home directories exist
    # cat /etc/passwd | egrep -v '^(root|halt|sync|shutdown)' | awk -F: '($7 != "/usr/sbin/nologin" & do
    # if [ ! -d "$dir" ]; then echo "The home directory ($dir) of user $user does not exist."
    # Ensure users' home directories are restricted to chmod 750 minimum
    # Ensure users' dot files not group or world writeable
    # Ensure .netrc files are access-restricted access and monitored
    # Ensure users have no .rhosts files in their home directories
    # Monitor packaged system files and dirs to ensure no discrepancies
    # 
    # 
    # 

# Init and get defaults
- name: Check if defaults for AC-3 were loaded
  set_fact:
    Loaded_ULL_AC_3: "{{ 'ULL_AC_3' in MachineDefaults }}"

- name: Initialize UndoList
  set_fact:
    UndoList: "{{ UndoList + ['ULL_AC_3_'+item.ID] }}"
  loop: "{{ ULL_AC_3_ChmodTasks }}"
  when: "'ULL_AC_3' in UndoList"

- name: Get AC-3 file status defaults
  include_tasks: TaskScripts/LinuxDefaultStat.yml
  vars:
    SecCat: ULL
    TaskCat: AC_3
    StatTasks: "{{ ULL_AC_3_ChmodTasks }}"
  when: not Loaded_ULL_AC_3

# Run tasks
- name: Run AC-3 chmod tasks
  include_tasks: TaskScripts/LinuxChmod.yml
  vars:
    SecCat: ULL
    TaskCat: AC_3
  loop: "{{ ULL_AC_3_ChmodTasks }}"
  loop_control:
    loop_var: ChmodTask